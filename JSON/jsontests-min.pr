program JsonTests;

{$mode objfpc}{$H+}

uses
  opensslsockets,
  fpjson,
  jsonparser,
  Variants,
  fphttpclient
;
  
var
  HttpClient: TFPHTTPClient;
  i: integer;
  RawJson: string;
  Url: string;
  jData : TJSONData;
  UsersObject: TJSONObject;
  AuthKeys: TJSONObject;
  OneUserObject: TJSONData;
  UserId: String;
  jItem : TJSONData;
  F: TextFile;
  JSONOutput: String;

begin
  HttpClient := TFPHttpClient.Create(nil);

  HttpClient.AllowRedirect := True;

  try
    try
      HttpClient.UserName := 'syndesk.pze';
      HttpClient.Password := 'cHvs4W#Czm3Q';

      Url := 'https://api.syndesk.de/ptt/monitor';
      RawJson := HttpClient.Get(Url);
    except
      on E: EHttpClient do
      begin
        Exit;
      end
      else
      begin
        raise;
      end;
    end;
  finally
    HttpClient.Free;
  end;

  { Tests auf JSON-Datentypen und -Funktionen }

  jData := GetJSON(RawJson);

  
{ Initialisierung von UsersObject und AuthKeys } 

UsersObject := TJSONObject.Create;
AuthKeys := TJSONObject.Create;


{ Schleife Ã¼ber alle Elemente }

  for i := 0 to jData.Count - 1 do
  begin
  jItem := jData.items[i];
  try UserId := jItem.FindPath('USER_ID').AsString; // EJSON: Duplicate object member: "b5265925" -- weil: AUTH_KEY ist nicht eindeutig
  except on E: EJSON do 
    WriteLn('Error: ' + E.Message);
  end;
  UsersObject.Add(UserId, TJSONObject(jItem)); // Casting alternativ: jObject := jData as TJSONObject;
  try AuthKeys.Add(jItem.FindPath('AUTH_KEY').AsString, jItem.FindPath('USER_ID').AsString);
  except on E: EJSON do 
  continue;
  end;
  end;


{ Formatiertes JSON speichern in UsersObject.txt }

  JSONOutput := UsersObject.FormatJSON;

  AssignFile(F, 'usersobject.txt');

  Rewrite(F);

  WriteLn(F, JSONOutput);

  CloseFile(F);

  WriteLn('In AuthKeys: ' + AuthKeys.Find('b5265925').FormatJSON);  // b5265925
  if AuthKeys.Find('b5265925').FormatJSON = '2493' then WriteLn('OK') else WriteLn('NOK'); // Test Equality, Result: NOK because of leading and trailing double quotes
  if AuthKeys.Find('b5265925').FormatJSON = '"2493"' then WriteLn('OK') else WriteLn('NOK'); // Test Equality, Result:OK
   if AuthKeys.Find('b5265925').AsString = '2493' then WriteLn('AsString: OK') else WriteLn('NOK'); // Test Equality, Result:OK
  jData.Free;
end.
